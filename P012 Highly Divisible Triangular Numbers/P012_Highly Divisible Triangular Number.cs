using System;
namespace Project_Euler
{
	public class P_012_Highly_Divisible_Triangular_Number
	{
		/*
		 * 
		 * The sequence of triangle numbers is generated by adding the 
		 * natural numbers. So the 7th triangle number would be 
		 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
		 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
		 * 
		 * Let us list the factors of the first seven triangle numbers:
		 * 1: 1
		 * 3: 1,3
		 * 6: 1,2,3,6
		 * 10: 1,2,5,10
		 * 15: 1,3,5,15
		 * 21: 1,3,7,21
		 * 28: 1,2,4,7,14,28
		 * 
		 * We can see that 28 is the first triangle 
		 * number to have over five divisors.
		 * 
		 * What is the value of the first triangle 
		 * number to have over five hundred divisors?
		 * 
		 */
		public void run()
		{
			int numDivisors = 0;
			int index = 11;
			int triangleNumber = 0;
			
			while (numDivisors < 500)
			{
				triangleNumber = GetTriangleNumber(index);
				Console.WriteLine($"{triangleNumber} has {GetNumberOfDivisors(triangleNumber)} divisors");
				if (GetNumberOfDivisors(triangleNumber) < 500)
				{
					index += 1;
					continue;
				}
			}
			Console.WriteLine($"The first triangle number with 500 divisors is {triangleNumber}");
		}

		static int GetTriangleNumber(int index)
		{
			int triangleNumber = 0;
			for (int i= 1; i<= index; i++)
			{
				triangleNumber += i;
			}
			return triangleNumber;
		}

		static int GetNumberOfDivisors(int triangleNumber)
		{
			int numDivisors = 0;
			for (int i = 1; i<=triangleNumber; i++)
			{
				if (triangleNumber % i == 0) numDivisors += 1;
			}
			return numDivisors;
		}

	}
}

